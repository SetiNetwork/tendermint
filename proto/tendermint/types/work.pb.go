// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/types/work.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Work struct {
	// Types that are valid to be assigned to Sum:
	//	*Work_DuplicateVoteWork
	//	*Work_LightClientAttackWork
	Sum isWork_Sum `protobuf_oneof:"sum"`
}

func (m *Work) Reset()         { *m = Work{} }
func (m *Work) String() string { return proto.CompactTextString(m) }
func (*Work) ProtoMessage()    {}
func (*Work) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fa7c0758235f145, []int{0}
}
func (m *Work) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Work) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Work.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Work) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Work.Merge(m, src)
}
func (m *Work) XXX_Size() int {
	return m.Size()
}
func (m *Work) XXX_DiscardUnknown() {
	xxx_messageInfo_Work.DiscardUnknown(m)
}

var xxx_messageInfo_Work proto.InternalMessageInfo

type isWork_Sum interface {
	isWork_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Work_DuplicateVoteWork struct {
	DuplicateVoteWork *DuplicateVoteWork `protobuf:"bytes,1,opt,name=duplicate_vote_work,json=duplicateVoteWork,proto3,oneof" json:"duplicate_vote_work,omitempty"`
}
type Work_LightClientAttackWork struct {
	LightClientAttackWork *LightClientAttackWork `protobuf:"bytes,2,opt,name=light_client_attack_work,json=lightClientAttackWork,proto3,oneof" json:"light_client_attack_work,omitempty"`
}

func (*Work_DuplicateVoteWork) isWork_Sum()     {}
func (*Work_LightClientAttackWork) isWork_Sum() {}

func (m *Work) GetSum() isWork_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Work) GetDuplicateVoteWork() *DuplicateVoteWork {
	if x, ok := m.GetSum().(*Work_DuplicateVoteWork); ok {
		return x.DuplicateVoteWork
	}
	return nil
}

func (m *Work) GetLightClientAttackWork() *LightClientAttackWork {
	if x, ok := m.GetSum().(*Work_LightClientAttackWork); ok {
		return x.LightClientAttackWork
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Work) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Work_DuplicateVoteWork)(nil),
		(*Work_LightClientAttackWork)(nil),
	}
}

// DuplicateVoteWork contains work of a validator signed two conflicting
// votes.
type DuplicateVoteWork struct {
	VoteA            *Vote     `protobuf:"bytes,1,opt,name=vote_a,json=voteA,proto3" json:"vote_a,omitempty"`
	VoteB            *Vote     `protobuf:"bytes,2,opt,name=vote_b,json=voteB,proto3" json:"vote_b,omitempty"`
	TotalVotingPower int64     `protobuf:"varint,3,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	ValidatorPower   int64     `protobuf:"varint,4,opt,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
	Timestamp        time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *DuplicateVoteWork) Reset()         { *m = DuplicateVoteWork{} }
func (m *DuplicateVoteWork) String() string { return proto.CompactTextString(m) }
func (*DuplicateVoteWork) ProtoMessage()    {}
func (*DuplicateVoteWork) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fa7c0758235f145, []int{1}
}
func (m *DuplicateVoteWork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DuplicateVoteWork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DuplicateVoteWork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DuplicateVoteWork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DuplicateVoteWork.Merge(m, src)
}
func (m *DuplicateVoteWork) XXX_Size() int {
	return m.Size()
}
func (m *DuplicateVoteWork) XXX_DiscardUnknown() {
	xxx_messageInfo_DuplicateVoteWork.DiscardUnknown(m)
}

var xxx_messageInfo_DuplicateVoteWork proto.InternalMessageInfo

func (m *DuplicateVoteWork) GetVoteA() *Vote {
	if m != nil {
		return m.VoteA
	}
	return nil
}

func (m *DuplicateVoteWork) GetVoteB() *Vote {
	if m != nil {
		return m.VoteB
	}
	return nil
}

func (m *DuplicateVoteWork) GetTotalVotingPower() int64 {
	if m != nil {
		return m.TotalVotingPower
	}
	return 0
}

func (m *DuplicateVoteWork) GetValidatorPower() int64 {
	if m != nil {
		return m.ValidatorPower
	}
	return 0
}

func (m *DuplicateVoteWork) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

// LightClientAttackWork contains work of a set of validators attempting
// to mislead a light client.
type LightClientAttackWork struct {
	ConflictingBlock    *LightBlock  `protobuf:"bytes,1,opt,name=conflicting_block,json=conflictingBlock,proto3" json:"conflicting_block,omitempty"`
	CommonHeight        int64        `protobuf:"varint,2,opt,name=common_height,json=commonHeight,proto3" json:"common_height,omitempty"`
	ByzantineValidators []*Validator `protobuf:"bytes,3,rep,name=byzantine_validators,json=byzantineValidators,proto3" json:"byzantine_validators,omitempty"`
	TotalVotingPower    int64        `protobuf:"varint,4,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	Timestamp           time.Time    `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *LightClientAttackWork) Reset()         { *m = LightClientAttackWork{} }
func (m *LightClientAttackWork) String() string { return proto.CompactTextString(m) }
func (*LightClientAttackWork) ProtoMessage()    {}
func (*LightClientAttackWork) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fa7c0758235f145, []int{2}
}
func (m *LightClientAttackWork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LightClientAttackWork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LightClientAttackWork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LightClientAttackWork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightClientAttackWork.Merge(m, src)
}
func (m *LightClientAttackWork) XXX_Size() int {
	return m.Size()
}
func (m *LightClientAttackWork) XXX_DiscardUnknown() {
	xxx_messageInfo_LightClientAttackWork.DiscardUnknown(m)
}

var xxx_messageInfo_LightClientAttackWork proto.InternalMessageInfo

func (m *LightClientAttackWork) GetConflictingBlock() *LightBlock {
	if m != nil {
		return m.ConflictingBlock
	}
	return nil
}

func (m *LightClientAttackWork) GetCommonHeight() int64 {
	if m != nil {
		return m.CommonHeight
	}
	return 0
}

func (m *LightClientAttackWork) GetByzantineValidators() []*Validator {
	if m != nil {
		return m.ByzantineValidators
	}
	return nil
}

func (m *LightClientAttackWork) GetTotalVotingPower() int64 {
	if m != nil {
		return m.TotalVotingPower
	}
	return 0
}

func (m *LightClientAttackWork) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type WorkList struct {
	Work []Work `protobuf:"bytes,1,rep,name=work,proto3" json:"work"`
}

func (m *WorkList) Reset()         { *m = WorkList{} }
func (m *WorkList) String() string { return proto.CompactTextString(m) }
func (*WorkList) ProtoMessage()    {}
func (*WorkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fa7c0758235f145, []int{3}
}
func (m *WorkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkList.Merge(m, src)
}
func (m *WorkList) XXX_Size() int {
	return m.Size()
}
func (m *WorkList) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkList.DiscardUnknown(m)
}

var xxx_messageInfo_WorkList proto.InternalMessageInfo

func (m *WorkList) GetWork() []Work {
	if m != nil {
		return m.Work
	}
	return nil
}

func init() {
	proto.RegisterType((*Work)(nil), "tendermint.types.Work")
	proto.RegisterType((*DuplicateVoteWork)(nil), "tendermint.types.DuplicateVoteWork")
	proto.RegisterType((*LightClientAttackWork)(nil), "tendermint.types.LightClientAttackWork")
	proto.RegisterType((*WorkList)(nil), "tendermint.types.WorkList")
}

func init() { proto.RegisterFile("tendermint/types/work.proto", fileDescriptor_7fa7c0758235f145) }

var fileDescriptor_7fa7c0758235f145 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xe3, 0x38, 0xa9, 0xca, 0x94, 0x9f, 0x64, 0xda, 0xa2, 0x28, 0xad, 0x9c, 0x28, 0x5d,
	0x34, 0x0b, 0xb0, 0x51, 0x59, 0xb0, 0x61, 0x53, 0xc3, 0xa2, 0x48, 0x15, 0x02, 0x0b, 0x8a, 0xc4,
	0xc6, 0xb2, 0x9d, 0xa9, 0x33, 0x8a, 0xed, 0xb1, 0xec, 0x9b, 0x56, 0xe5, 0x19, 0x58, 0xf4, 0xb1,
	0xc2, 0xae, 0x4b, 0x56, 0x80, 0x92, 0x17, 0x41, 0x73, 0xfd, 0x93, 0x2a, 0x4e, 0x58, 0xb1, 0x89,
	0x9c, 0x73, 0xbe, 0x7b, 0x7d, 0xe7, 0xcc, 0x8c, 0xc9, 0x01, 0xb0, 0x68, 0xc4, 0x92, 0x90, 0x47,
	0x60, 0xc0, 0x4d, 0xcc, 0x52, 0xe3, 0x5a, 0x24, 0x13, 0x3d, 0x4e, 0x04, 0x08, 0xda, 0x5a, 0x9a,
	0x3a, 0x9a, 0xdd, 0x3d, 0x5f, 0xf8, 0x02, 0x4d, 0x43, 0x3e, 0x65, 0x5c, 0xb7, 0xe7, 0x0b, 0xe1,
	0x07, 0xcc, 0xc0, 0x7f, 0xee, 0xf4, 0xd2, 0x00, 0x1e, 0xb2, 0x14, 0x9c, 0x30, 0xce, 0x81, 0xc3,
	0xca, 0x5b, 0xf0, 0x37, 0x77, 0xfb, 0x15, 0xf7, 0xca, 0x09, 0xf8, 0xc8, 0x01, 0x91, 0x64, 0xc4,
	0x60, 0xa6, 0x90, 0xc6, 0x17, 0x91, 0x4c, 0xe8, 0x67, 0xb2, 0x3b, 0x9a, 0xc6, 0x01, 0xf7, 0x1c,
	0x60, 0xf6, 0x95, 0x00, 0x66, 0xcb, 0x71, 0x3b, 0x4a, 0x5f, 0x19, 0xee, 0x9c, 0x1c, 0xe9, 0xab,
	0xf3, 0xea, 0x6f, 0x0b, 0xf8, 0x42, 0x00, 0x93, 0x1d, 0xce, 0x6a, 0x56, 0x7b, 0xb4, 0x2a, 0x52,
	0x97, 0x74, 0x02, 0xee, 0x8f, 0xc1, 0xf6, 0x02, 0xce, 0x22, 0xb0, 0x1d, 0x00, 0xc7, 0x9b, 0x64,
	0xbd, 0xeb, 0xd8, 0xfb, 0xb8, 0xda, 0xfb, 0x5c, 0x56, 0xbc, 0xc1, 0x82, 0x53, 0xe4, 0xf3, 0xfe,
	0xfb, 0xc1, 0x3a, 0xc3, 0x6c, 0x12, 0x35, 0x9d, 0x86, 0x83, 0xef, 0x75, 0xd2, 0xae, 0x4c, 0x45,
	0x9f, 0x93, 0x2d, 0x5c, 0x8d, 0x93, 0x2f, 0xe5, 0x69, 0xf5, 0x75, 0x92, 0xb5, 0x9a, 0x92, 0x3a,
	0x2d, 0x71, 0x37, 0x9f, 0xee, 0x9f, 0xb8, 0x49, 0x9f, 0x11, 0x0a, 0x02, 0x9c, 0x40, 0x26, 0xc6,
	0x23, 0xdf, 0x8e, 0xc5, 0x35, 0x4b, 0x3a, 0x6a, 0x5f, 0x19, 0xaa, 0x56, 0x0b, 0x9d, 0x0b, 0x34,
	0x3e, 0x48, 0x9d, 0x1e, 0x93, 0x27, 0x65, 0xfe, 0x39, 0xda, 0x40, 0xf4, 0x71, 0x29, 0x67, 0xa0,
	0x49, 0x1e, 0x94, 0x1b, 0xdd, 0x69, 0xe2, 0x20, 0x5d, 0x3d, 0x3b, 0x0a, 0x7a, 0x71, 0x14, 0xf4,
	0x4f, 0x05, 0x61, 0x6e, 0xcf, 0x7e, 0xf5, 0x6a, 0xb7, 0xbf, 0x7b, 0x8a, 0xb5, 0x2c, 0x1b, 0xfc,
	0xa8, 0x93, 0xfd, 0xb5, 0x41, 0xd2, 0x77, 0xa4, 0xed, 0x89, 0xe8, 0x32, 0xe0, 0x1e, 0xce, 0xec,
	0x06, 0xc2, 0x2b, 0x36, 0xfa, 0x70, 0xc3, 0x66, 0x98, 0x92, 0xb1, 0x5a, 0xf7, 0xca, 0x50, 0xa1,
	0x47, 0xe4, 0x91, 0x27, 0xc2, 0x50, 0x44, 0xf6, 0x98, 0x49, 0x0e, 0x53, 0x53, 0xad, 0x87, 0x99,
	0x78, 0x86, 0x1a, 0x7d, 0x4f, 0xf6, 0xdc, 0x9b, 0x6f, 0x4e, 0x04, 0x3c, 0x62, 0x76, 0xb9, 0xd2,
	0xb4, 0xa3, 0xf6, 0xd5, 0xe1, 0xce, 0xc9, 0xc1, 0x9a, 0x84, 0x0b, 0xc6, 0xda, 0x2d, 0x0b, 0x4b,
	0x2d, 0xdd, 0x10, 0x7a, 0x63, 0x43, 0xe8, 0xff, 0x23, 0xcb, 0xd7, 0x64, 0x5b, 0x26, 0x77, 0xce,
	0x53, 0xa0, 0x2f, 0x48, 0x23, 0xbf, 0x19, 0xea, 0xfa, 0xf3, 0x81, 0x67, 0xb2, 0x21, 0xdb, 0x58,
	0x48, 0x9a, 0x1f, 0x67, 0x73, 0x4d, 0xb9, 0x9b, 0x6b, 0xca, 0x9f, 0xb9, 0xa6, 0xdc, 0x2e, 0xb4,
	0xda, 0xdd, 0x42, 0xab, 0xfd, 0x5c, 0x68, 0xb5, 0xaf, 0xaf, 0x7c, 0x0e, 0xe3, 0xa9, 0xab, 0x7b,
	0x22, 0x34, 0xee, 0x5f, 0xd5, 0xe5, 0x63, 0xf6, 0x45, 0x58, 0xbd, 0xc6, 0xee, 0x16, 0xea, 0x2f,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x11, 0x64, 0xe6, 0x5b, 0x65, 0x04, 0x00, 0x00,
}

func (m *Work) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Work) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Work) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Work_DuplicateVoteWork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Work_DuplicateVoteWork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DuplicateVoteWork != nil {
		{
			size, err := m.DuplicateVoteWork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Work_LightClientAttackWork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Work_LightClientAttackWork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LightClientAttackWork != nil {
		{
			size, err := m.LightClientAttackWork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DuplicateVoteWork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DuplicateVoteWork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DuplicateVoteWork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintWork(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.ValidatorPower != 0 {
		i = encodeVarintWork(dAtA, i, uint64(m.ValidatorPower))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalVotingPower != 0 {
		i = encodeVarintWork(dAtA, i, uint64(m.TotalVotingPower))
		i--
		dAtA[i] = 0x18
	}
	if m.VoteB != nil {
		{
			size, err := m.VoteB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VoteA != nil {
		{
			size, err := m.VoteA.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LightClientAttackWork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LightClientAttackWork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LightClientAttackWork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintWork(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	if m.TotalVotingPower != 0 {
		i = encodeVarintWork(dAtA, i, uint64(m.TotalVotingPower))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ByzantineValidators) > 0 {
		for iNdEx := len(m.ByzantineValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ByzantineValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CommonHeight != 0 {
		i = encodeVarintWork(dAtA, i, uint64(m.CommonHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ConflictingBlock != nil {
		{
			size, err := m.ConflictingBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Work) > 0 {
		for iNdEx := len(m.Work) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Work[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWork(dAtA []byte, offset int, v uint64) int {
	offset -= sovWork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Work) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Work_DuplicateVoteWork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DuplicateVoteWork != nil {
		l = m.DuplicateVoteWork.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	return n
}
func (m *Work_LightClientAttackWork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LightClientAttackWork != nil {
		l = m.LightClientAttackWork.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	return n
}
func (m *DuplicateVoteWork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteA != nil {
		l = m.VoteA.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	if m.VoteB != nil {
		l = m.VoteB.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	if m.TotalVotingPower != 0 {
		n += 1 + sovWork(uint64(m.TotalVotingPower))
	}
	if m.ValidatorPower != 0 {
		n += 1 + sovWork(uint64(m.ValidatorPower))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovWork(uint64(l))
	return n
}

func (m *LightClientAttackWork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConflictingBlock != nil {
		l = m.ConflictingBlock.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	if m.CommonHeight != 0 {
		n += 1 + sovWork(uint64(m.CommonHeight))
	}
	if len(m.ByzantineValidators) > 0 {
		for _, e := range m.ByzantineValidators {
			l = e.Size()
			n += 1 + l + sovWork(uint64(l))
		}
	}
	if m.TotalVotingPower != 0 {
		n += 1 + sovWork(uint64(m.TotalVotingPower))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovWork(uint64(l))
	return n
}

func (m *WorkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Work) > 0 {
		for _, e := range m.Work {
			l = e.Size()
			n += 1 + l + sovWork(uint64(l))
		}
	}
	return n
}

func sovWork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWork(x uint64) (n int) {
	return sovWork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Work) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Work: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Work: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuplicateVoteWork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DuplicateVoteWork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Work_DuplicateVoteWork{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightClientAttackWork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LightClientAttackWork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Work_LightClientAttackWork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DuplicateVoteWork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DuplicateVoteWork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DuplicateVoteWork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteA == nil {
				m.VoteA = &Vote{}
			}
			if err := m.VoteA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteB == nil {
				m.VoteB = &Vote{}
			}
			if err := m.VoteB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			m.TotalVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPower", wireType)
			}
			m.ValidatorPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LightClientAttackWork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LightClientAttackWork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LightClientAttackWork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictingBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConflictingBlock == nil {
				m.ConflictingBlock = &LightBlock{}
			}
			if err := m.ConflictingBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonHeight", wireType)
			}
			m.CommonHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByzantineValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByzantineValidators = append(m.ByzantineValidators, &Validator{})
			if err := m.ByzantineValidators[len(m.ByzantineValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			m.TotalVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Work", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Work = append(m.Work, Work{})
			if err := m.Work[len(m.Work)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWork = fmt.Errorf("proto: unexpected end of group")
)
